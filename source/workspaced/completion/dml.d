//
//
// DO NOT EDIT
//
// This module has been generated automatically from views/dml-completions.txt using `dub run :dml`
//
//
module workspaced.completion.dml;

import workspaced.com.dlangui;

enum dmlCompletions = [CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Cursive", "Cursive font", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Fantasy", "Fantasy font", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "MonoSpace", "Monospace font (fixed pitch font), e.g. Courier New", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "SansSerif", "Sans Serif font, e.g. Arial", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Serif", "Serif font, e.g. Times New Roman", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Unspecified", "Unknown / not set / does not matter", "FontFamily"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Gone", "Completely hidden, as not has been added", "Visibility"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Invisible", "Not visible, but occupies a space in layout", "Visibility"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Visible", "Visible on screen (default)", "Visibility"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Bottom", "vertically align to the bottom of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Center", "align to the center of box (VCenter | HCenter)", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "HCenter", "horizontally align to the center of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Left", "horizontally align to the left of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Right", "horizontally align to the right of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Top", "vertically align to the top of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "TopLeft", "align to the top left corner of box (Left | Top)", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Unspecified", "alignment is not specified", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "VCenter", "vertically align to the center of box", "Align"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Activated", "widget is activated", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Checkable", "widget can be checked", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Checked", "widget is checked", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Default", "widget is default control for form (should be focused when window gains focus first time)", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Enabled", "widget can process mouse and key events", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Focused", "widget has focus", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Hovered", "mouse pointer is over this widget", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Normal", "state not specified / normal", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Parent", "return state of parent instead of widget's state when requested", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Pressed", "pressed (e.g. clicked by mouse)", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Selected", "widget is selected", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "WindowFocused", "window is focused", "State"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "HotKeys", "text contains hot key prefixed with & char (e.g. \"&File\")", "TextFlag"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "StrikeThrough", "strikethrough text when drawing", "TextFlag"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Underline", "underline text when drawing", "TextFlag"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "UnderlineHotKeys", "underline hot key when drawing", "TextFlag"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "UnderlineHotKeysWhenAltPressed", "underline hot key when drawing", "TextFlag"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Bottom", "", "DockAlignment"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Left", "", "DockAlignment"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Right", "", "DockAlignment"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Top", "", "DockAlignment"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Horizontal", "", "Orientation"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "Vertical", "", "Orientation"), [], []),
	CompletionLookup(CompletionItem(CompletionType.EnumDefinition, "CloseOnClickOutside", "close popup when mouse button clicked outside of its bounds", "PopupFlags"), [], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "Widget", "Base class for all widgets.", ""), [["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "alignment", "sets alignment (combined vertical and horizontal)", "Align"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "alpha", "set widget drawing alpha value (0=opaque .. 255=transparent)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Color, "backgroundColor", "set background color for widget - override one from style", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "backgroundImageId", "background image id", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "checkable", "when true, control supports Checked state", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "checked", "set checked state", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "clickable", "when true, user can click this control, and get onClick listeners called", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "enabled", "change enabled state", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "focusable", "whether widget can be focused", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "focusGroup", "When focus group is set for some parent widget, focus from one of containing widgets can be moved using keyboard only to one of other widgets containing in it and cannot bypass bounds of focusGroup.", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "fontFace", "set font face for widget - override one from style", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "fontFamily", "set font family for widget - override one from style", "FontFamily"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "fontItalic", "set font style (italic/normal) for widget - override one from style", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "fontSize", "font size in pixels", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "fontWeight", "set font weight for widget - override one from style", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "id", "set widget id", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "layoutHeight", "sets layout height options (WRAP_CONTENT, FILL_PARENT, or some constant value)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "layoutWeight", "sets layout weight (while resizing to fill parent, widget will be resized proportionally to this value)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "layoutWidth", "sets layout width options (WRAP_CONTENT, FILL_PARENT, or some constant value)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Rectangle, "margins", "margins (between widget bounds and its background)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "maxHeight", "set max height constraint (SIZE_UNSPECIFIED for no constraint)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "maxWidth", "set max width constraint (SIZE_UNSPECIFIED for no constraint)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "minHeight", "set min height constraint (0 for no constraint)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "minWidth", "set min width constraint (0 for no constraint)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Rectangle, "padding", "padding (between background bounds and content of widget)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "resetState", "remove state flags", "State"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "setState", "add state flags", "State"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "state", "set new widget state", "State"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "styleId", "widget style id, null if not set", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "tabOrder", "tab order - hint for focus movement using Tab/Shift+Tab", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "text", "sets widget content text (override to support this)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Color, "textColor", "set text color (ARGB 32 bit value)", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "textFlags", "set text flags", "TextFlag"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "trackHover", "mouse movement processing flag", ""), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "visibility", "sets widget visibility (Visible, Invisible, Gone)", "Visibility"), [], ["Widget"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "WidgetGroup", "Base class for widgets which have children.", ""), [["Widget"], ["WidgetGroup"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "WidgetGroupDefaultDrawing", "WidgetGroup with default drawing of children (just draw all children)", ""), [["Widget"], ["WidgetGroupDefaultDrawing"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "AppFrame", "", ""), [["VerticalLayout"], ["AppFrame"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ComboBoxBase", "Abstract ComboBox", ""), [["HorizontalLayout"], ["ComboBoxBase"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Number, "selectedItemIndex", "Selected item index", ""), [], ["ComboBoxBase"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "ComboBox", "ComboBox with list of strings", ""), [["ComboBoxBase"], ["ComboBox"], ["HorizontalLayout"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ComboEdit", "Editable ComboBox with list of strings", ""), [["ComboBox"], ["ComboEdit"], ["ComboBoxBase"], ["HorizontalLayout"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "readOnly", "", ""), [], ["ComboEdit"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "AbstractSlider", "base class for widgets like scrollbars and sliders", ""), [["WidgetGroup"], ["AbstractSlider"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Number, "pageSize", "set page size (visible area size)", ""), [], ["AbstractSlider"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "position", "sets new slider position", ""), [], ["AbstractSlider"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "Button", "Text only button", ""), [["Widget"], ["Button"]], []),
	CompletionLookup(CompletionItem(CompletionType.String, "textResource", "", ""), [], ["Button"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "CheckBox", "checkbox", ""), [["ImageTextButton"], ["CheckBox"], ["HorizontalLayout"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "HSpacer", "horizontal spacer to fill empty space in horizontal layouts", ""), [["Widget"], ["HSpacer"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ImageButton", "button with image only", ""), [["ImageWidget"], ["ImageButton"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ImageTextButton", "button with image and text", ""), [["HorizontalLayout"], ["ImageTextButton"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ImageWidget", "static image widget", ""), [["Widget"], ["ImageWidget"]], []),
	CompletionLookup(CompletionItem(CompletionType.String, "drawable", "set custom drawable (not one from resources)", ""), [], ["ImageWidget"]),
	CompletionLookup(CompletionItem(CompletionType.String, "drawableId", "set drawable image id", ""), [], ["ImageWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "RadioButton", "radio button", ""), [["ImageTextButton"], ["RadioButton"], ["HorizontalLayout"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ScrollBar", "scroll bar - either vertical or horizontal", ""), [["AbstractSlider"], ["ScrollBar"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TextWidget", "static text widget", ""), [["Widget"], ["TextWidget"]], []),
	CompletionLookup(CompletionItem(CompletionType.String, "textResource", "set text resource ID to show", ""), [], ["TextWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "VSpacer", "vertical spacer to fill empty space in vertical layouts", ""), [["Widget"], ["VSpacer"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "DockHost", "Layout for docking support - contains body widget and optional docked windows", ""), [["WidgetGroupDefaultDrawing"], ["DockHost"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "DockWindow", "docked window", ""), [["VerticalLayout"], ["DockWindow"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "dockAlignment", "", "DockAlignment"), [], ["DockWindow"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "EditBox", "multiline editor", ""), [["EditWidgetBase"], ["EditBox"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Number, "maxFontSize", "", ""), [], ["EditBox"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "minFontSize", "", ""), [], ["EditBox"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "EditLine", "single line editor", ""), [["EditWidgetBase"], ["EditLine"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "EditWidgetBase", "base for all editor widgets", ""), [["ScrollWidgetBase"], ["EditWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "readOnly", "readonly flag (when true, user cannot change content of editor)", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "replaceMode", "replace mode flag (when true, entered character replaces character under cursor)", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "showLineNumbers", "when true, line numbers are shown", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "tabSize", "sets tab size (in number of spaces)", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "useSpacesForTabs", "when true, spaces will be inserted instead of tabs", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "wantTabs", "when true, Tab / Shift+Tab presses are processed internally in widget (e.g. insert tab character) instead of focus change navigation", ""), [], ["EditWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "GridWidgetBase", "Abstract grid widget", ""), [["ScrollWidgetBase"], ["GridWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Number, "cols", "set column count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "defColumnWidth", "default column width - for newly added columns", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "defRowHeight", "default row height - for newly added columns", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "fixedCols", "fixed (non-scrollable) data column count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "fixedRows", "fixed (non-scrollable) data row count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "headerCols", "row header column count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "headerRows", "col header row count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "rows", "set row count", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "rowSelect", "when true, allows only select the whole row", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "showColHeaders", "flag to enable column headers", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "showRowHeaders", "flag to enable row headers", ""), [], ["GridWidgetBase"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "StringGridWidget", "Grid view with string data shown. All rows are of the same height", ""), [["StringGridWidgetBase"], ["StringGridWidget"], ["GridWidgetBase"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "StringGridWidgetBase", "", ""), [["GridWidgetBase"], ["StringGridWidgetBase"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "FrameLayout", "place all children into same place (usually, only one child should be visible at a time)", ""), [["WidgetGroupDefaultDrawing"], ["FrameLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "HorizontalLayout", "Arranges children horizontally", ""), [["LinearLayout"], ["HorizontalLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "LinearLayout", "Arranges items either vertically or horizontally", ""), [["Widget"], ["LinearLayout"]], []),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "orientation", "sets linear layout orientation", "Orientation"), [], ["LinearLayout"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "ResizerWidget", "Resizer control. Put it between other items in LinearLayout to allow resizing its siblings. While dragging, it will resize previous and next children in layout", ""), [["Widget"], ["ResizerWidget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TableLayout", "layout children as table with rows and columns", ""), [["WidgetGroupDefaultDrawing"], ["TableLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Number, "colCount", "number of columns", ""), [], ["TableLayout"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "VerticalLayout", "Arranges children vertically", ""), [["LinearLayout"], ["VerticalLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ListWidget", "List widget - shows content as hori", ""), [["WidgetGroup"], ["ListWidget"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "orientation", "sets linear layout orientation", "Orientation"), [], ["ListWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Number, "selectedItemIndex", "Selected item index", ""), [], ["ListWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Boolean, "selectOnHover", "when true, mouse hover selects underlying item", ""), [], ["ListWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "MainMenu", "main menu (horizontal)", ""), [["MenuWidgetBase"], ["MainMenu"], ["ListWidget"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "MenuItemWidget", "widget to draw menu item", ""), [["WidgetGroupDefaultDrawing"], ["MenuItemWidget"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "MenuWidgetBase", "base class for menus", ""), [["ListWidget"], ["MenuWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "PopupMenu", "popup menu widget (vertical layout of items)", ""), [["MenuWidgetBase"], ["PopupMenu"], ["ListWidget"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "PopupWidget", "popup widget container", ""), [["LinearLayout"], ["PopupWidget"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.EnumValue, "flags", "set popup behavior flags", "PopupFlags"), [], ["PopupWidget"]),
	CompletionLookup(CompletionItem(CompletionType.Class, "ScrollWidget", "Widget which can show content of widget group with optional scrolling", ""), [["ScrollWidgetBase"], ["ScrollWidget"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ScrollWidgetBase", "Abstract scrollable widget", ""), [["WidgetGroup"], ["ScrollWidgetBase"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "SourceEdit", "", ""), [["EditBox"], ["SourceEdit"], ["EditWidgetBase"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "StatusLine", "Status line control", ""), [["HorizontalLayout"], ["StatusLine"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TabControl", "tab header - tab labels, with optional More button", ""), [["WidgetGroupDefaultDrawing"], ["TabControl"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TabHost", "container for widgets controlled by TabControl", ""), [["FrameLayout"], ["TabHost"], ["WidgetGroupDefaultDrawing"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TabItemWidget", "tab item widget - to show tab header", ""), [["HorizontalLayout"], ["TabItemWidget"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TabWidget", "compound widget - contains from TabControl widget (tabs header) and TabHost (content pages)", ""), [["VerticalLayout"], ["TabWidget"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ToolBar", "Layout with buttons", ""), [["HorizontalLayout"], ["ToolBar"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ToolBarHost", "Layout with several toolbars", ""), [["HorizontalLayout"], ["ToolBarHost"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ToolBarImageButton", "image button for toolbar", ""), [["ImageButton"], ["ToolBarImageButton"], ["ImageWidget"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "ToolBarSeparator", "separator for toolbars", ""), [["ImageWidget"], ["ToolBarSeparator"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TreeItemWidget", "Item widget for displaying in trees", ""), [["HorizontalLayout"], ["TreeItemWidget"], ["LinearLayout"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TreeWidget", "Tree widget with items which can have icons and labels", ""), [["TreeWidgetBase"], ["TreeWidget"], ["ScrollWidget"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], []),
	CompletionLookup(CompletionItem(CompletionType.Class, "TreeWidgetBase", "Abstract tree widget", ""), [["ScrollWidget"], ["TreeWidgetBase"], ["ScrollWidgetBase"], ["WidgetGroup"], ["Widget"]], [])];